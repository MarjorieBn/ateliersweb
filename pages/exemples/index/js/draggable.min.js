
var DraggableTransform = /** @class */ (function () {
  function DraggableTransform(element, options) {
   
    var _this = this;
    this.mousedown = false;
    this.dragging = false;
    this.has_clicked = false;
    this.start_pos = {
      x: 0,
      y: 0,
    };
    this.last_position = {
      x: 0,
      y: 0,
    };
    this.mod_x = 0;
    this.mod_y = 0;
    var defaults = {
      handlebar: false,
      init: function (e) {},
      start: function (e) {},
      drag: function (e) {},
      end: function (e) {},
    };
    this.element = element;
    this.options = Object.assign({}, defaults, options);
    if (options.handlebar) {
      this.handlebar = options.handlebar;
    } else {
      this.handlebar = element;
    }
    var self = this;
    this.handlebar.addEventListener("mousedown", function (e) {
      self.options.start.call(self, e);
      return _this.click(e);
    });
    document.addEventListener("mousemove", function (e) {
      if (self.mousedown) {
        self.drag(e);
        self.options.drag.call(self, e);
      }
    });
    this.handlebar.addEventListener("mouseup", function (e) {
      _this.dragging = false;
      _this.mousedown = false;
    });
    document.body.addEventListener("mouseup", function (e) {
      if (_this.mousedown) {
        _this.mousedown = false;
        _this.dragging = false;
      }
      self.options.end.call(self, e);
    });
  }
  DraggableTransform.prototype.click = function (e) {
    this.mousedown = true;
    if (!this.has_clicked) {
      this.has_clicked = true;
      this.start_pos = {
        x: e.x,
        y: e.y,
      };
    }
    if (this.last_position.x !== 0 && this.last_position.y !== 0) {
      this.mod_x = e.x - (this.start_pos.x + this.last_position.x);
      this.mod_y = e.y - (this.start_pos.y + this.last_position.y);
    }
  };
  DraggableTransform.prototype.drag = function (e) {
    this.dragging = true;
    var positions = this.get_position_offsets(e);
    this.last_position = positions;
    this.element.style.transform =
      "translate(" + positions.x + "px," + positions.y + "px";
  };
  DraggableTransform.prototype.get_position_offsets = function (e) {
    var bounding_rect = this.handlebar.getBoundingClientRect();
    var x = e.x - this.start_pos.x - this.mod_x;
    var y = e.y - this.start_pos.y - this.mod_y;
    return {
      x: x,
      y: y,
    };
  };
  return DraggableTransform;
})();
